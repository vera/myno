<?xml version="1.0" encoding="UTF-8"?><rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="0">
  <data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"><![CDATA[module mqtt-TestDevices {
  namespace "https://www.cs.uni-potsdam.de/bs/research/myno/TestDevices";
  prefix TestDevices;

  rpc funcGetDeviceToken {
    description
      "Get token for MYNO update";
    default "yang/update/token";
    input {
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum 10_OK {
            description
              "10 successful";
          }
          enum 11_NOOP {
            description
              "11 nothing to do";
          }
          enum 12_ERROR {
            description
              "12 error";
          }
        }
      }
    }
  }

  rpc funcPubUpdateImage {
    description
      "Publish update image";
    default "yang/update/image";
    input {
      leaf inputUpdateImage {
        description
          "Update image";
        type hexBinary;
      }
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum 10_OK {
            description
              "10 successful";
          }
          enum 11_NOOP {
            description
              "11 nothing to do";
          }
          enum 12_ERROR {
            description
              "12 error";
          }
        }
      }
    }
  }

  rpc funcPubUpdateManifest {
    description
      "Publish update manifest";
    default "yang/update/manifest";
    input {
      leaf input_1_AppId {
        description
          "App ID";
        type string;
      }
      leaf input_2_LinkOffset {
        description
          "Link offset";
        type int;
      }
      leaf input_3_Hash {
        description
          "Input hash";
        type string;
      }
      leaf input_4_Size {
        description
          "Image size";
        type int;
      }
      leaf input_5_Version {
        description
          "Firmware version";
        type int;
      }
      leaf input_6_OldVersion {
        description
          "Old firmware version";
        type int;
      }
      leaf input_7_InnerSignature {
        description
          "Inner signature";
        type hexBinary;
      }
      leaf input_8_DeviceNonce {
        description
          "Nonce";
        type int;
      }
      leaf input_9_OuterSignature {
        description
          "Outer signature";
        type hexBinary;
      }
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum 10_OK {
            description
              "10 successful";
          }
          enum 11_NOOP {
            description
              "11 nothing to do";
          }
          enum 12_ERROR {
            description
              "12 error";
          }
        }
      }
    }
  }

  container device {
    description
      "MQTT device that accepts firmware updates";
    list device-id {
      key "uuid";
      leaf uuid {
        default "TEST-DEVICE-MUP";
        type string;
      }
    }
    leaf device-category {
      description
        "Identifies the device category";
      type string;
    }
  }
}
module mqtt-TestDevices {
  namespace "https://www.cs.uni-potsdam.de/bs/research/myno/TestDevices";
  prefix TestDevices;

  rpc funcLedOff {
    description
      "LED ausschalten";
    default "led";
    input {
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum 10_OK {
            description
              "10 successful";
          }
          enum 11_NOOP {
            description
              "11 nothing to do";
          }
          enum 12_ERROR {
            description
              "12 error";
          }
        }
      }
    }
  }

  rpc funcLedOn {
    description
      "LED anschalten";
    default "led";
    input {
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum 10_OK {
            description
              "10 successful";
          }
          enum 11_NOOP {
            description
              "11 nothing to do";
          }
          enum 12_ERROR {
            description
              "12 error";
          }
        }
      }
    }
  }

  container device {
    description
      "Simple MQTT device with 1 sensor and 1 LED";
    list device-id {
      key "uuid";
      leaf uuid {
        default "TEST-DEVICE-SENSOR+LED";
        type string;
      }
    }
    leaf device-category {
      description
        "Identifies the device category";
      type string;
    }
    container telemetry {
      leaf funcGetTemperature {
        description
          "Gibt die Umgebungstemperatur zurück";
        container datapoint {
          leaf outDpTemperature {
            default "sensor/temperature/TEST-DEVICE-SENSOR+LED";
            type string;
            units "degreeCelsius;°C";
          }
        }
      }
    }
  }
}
module mqtt-TestDevices {
  namespace "https://www.cs.uni-potsdam.de/bs/research/myno/TestDevices";
  prefix TestDevices;

  rpc funcAutoMoisture {
    description
      "automation rule for moisture sensor";
    default "automation/sensor/moisture/moisture_1/TEST-DEVICE-PA";
    input {
      leaf inputAutoMoisture {
        description
          "automation for moisture";
        type string;
      }
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum ERROR {
            description
              "error";
          }
          enum NOOP {
            description
              "nothing to do";
          }
          enum OK {
            description
              "successful";
          }
        }
      }
    }
  }

  rpc funcConfMoisture {
    description
      "configure moisture sensor for events";
    default "config/sensor/moisture/moisture_1/TEST-DEVICE-PA";
    input {
      leaf input_1_ConfEvName {
        description
          "event name caused by configuration";
        type string;
      }
      leaf input_2_ConfOperator {
        description
          "describes configuration operators";
        type enumeration {
          enum <;
          enum <=;
          enum ==;
          enum >;
          enum >=;
        }
      }
      leaf input_3_ConfMoisture {
        description
          "threshold values for moisture sensor";
        type int {
          range "0..100";
        }
      }
      leaf input_4_ConfInterval {
        description
          "interval for event configuration";
        type int;
      }
      leaf input_5_ConfDuration {
        description
          "duration for event configuration";
        type int;
      }
      leaf input_6_ConfCrud {
        description
          "select CRUD operations for events";
        type enumeration {
          enum CREATE;
          enum DELETE;
          enum READ;
          enum UPDATE;
        }
      }
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum ERROR {
            description
              "error";
          }
          enum NOOP {
            description
              "nothing to do";
          }
          enum OK {
            description
              "successful";
          }
        }
      }
    }
  }

  rpc funcConfTemperature {
    description
      "configure event for temperature sensor";
    default "config/sensor/temperature/temperature_1/TEST-DEVICE-PA";
    input {
      leaf input_1_ConfEvName {
        description
          "event name caused by configuration";
        type string;
      }
      leaf input_2_ConfOperator {
        description
          "describes configuration operators";
        type enumeration {
          enum <;
          enum <=;
          enum ==;
          enum >;
          enum >=;
        }
      }
      leaf input_3_ConfTemperature {
        description
          "threshold values for temperature sensor";
        type int {
          range "-20..100";
        }
      }
      leaf input_4_ConfInterval {
        description
          "interval for event configuration";
        type int;
      }
      leaf input_5_ConfDuration {
        description
          "duration for event configuration";
        type int;
      }
      leaf input_6_ConfCrud {
        description
          "select CRUD operations for events";
        type enumeration {
          enum CREATE;
          enum DELETE;
          enum READ;
          enum UPDATE;
        }
      }
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum ERROR {
            description
              "error";
          }
          enum NOOP {
            description
              "nothing to do";
          }
          enum OK {
            description
              "successful";
          }
        }
      }
    }
  }

  rpc funcPump_1Off {
    description
      "turn pump 1 off";
    default "actuator/pump/pump_1/TEST-DEVICE-PA";
    input {
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum ERROR {
            description
              "error";
          }
          enum NOOP {
            description
              "nothing to do";
          }
          enum OK {
            description
              "successful";
          }
        }
      }
    }
  }

  rpc funcPump_1On {
    description
      "turn pump 1 on";
    default "actuator/pump/pump_1/TEST-DEVICE-PA";
    input {
      leaf uuidInput {
        description
          "Target UUID for request";
        type string;
      }
    }
    output {
      leaf retval {
        type enumeration {
          enum ERROR {
            description
              "error";
          }
          enum NOOP {
            description
              "nothing to do";
          }
          enum OK {
            description
              "successful";
          }
        }
      }
    }
  }

  container device {
    description
      "MQTT device for precision agriculture";
    list device-id {
      key "uuid";
      leaf uuid {
        default "TEST-DEVICE-PA";
        type string;
      }
    }
    leaf device-category {
      description
        "Identifies the device category";
      type string;
    }
    container telemetry {
      leaf funcEvMoisture {
        description
          "event function for moisture sensor";
        container datapoint {
          leaf outDpEvMoisture {
            default "event/sensor/moisture/moisture_1/TEST-DEVICE-PA";
            type string;
          }
        }
      }
      leaf funcEvTemperature {
        description
          "event function for temperature sensor";
        container datapoint {
          leaf outDpEvTemperature {
            default "event/sensor/temperature/temperature_1/TEST-DEVICE-PA";
            type string;
          }
        }
      }
      leaf funcGetBrightness {
        description
          "Get brightness from sensor";
        container datapoint {
          leaf outDpBrightness {
            default "sensor/brightness/brightness_1/TEST-DEVICE-PA";
            type string;
            units "lux;lx";
          }
        }
      }
      leaf funcGetHumidity {
        description
          "Get humidity from sensor";
        container datapoint {
          leaf outDpHumidity {
            default "sensor/humidity/humidity_1/TEST-DEVICE-PA";
            type string;
            units "percent;%%";
          }
        }
      }
      leaf funcGetMoisture {
        description
          "Get moisture from sensor";
        container datapoint {
          leaf outDpMoisture {
            default "sensor/moisture/moisture_1/TEST-DEVICE-PA";
            type string;
            units "percent;%%";
          }
        }
      }
      leaf funcGetPressure {
        description
          "Get pressure from sensor";
        container datapoint {
          leaf outDpPressure {
            default "sensor/pressure/pressure_1/TEST-DEVICE-PA";
            type string;
            units "hectopascal;hPa";
          }
        }
      }
      leaf funcGetRainDetect {
        description
          "Get rain detection signal from sensor";
        container datapoint {
          leaf outDpRainDetect {
            default "sensor/rain/rain_1/TEST-DEVICE-PA";
            type string;
            units "percent;%%";
          }
        }
      }
      leaf funcGetTemperature {
        description
          "Get temperature from sensor";
        container datapoint {
          leaf outDpTemperature {
            default "sensor/temperature/temperature_1/TEST-DEVICE-PA";
            type string;
            units "degreeCelsius;°C";
          }
        }
      }
    }
  }
}
]]></data>
</rpc-reply>
